/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Audio as PrismaAudio,
  User as PrismaUser,
} from "@prisma/client";

export class AudioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AudioCountArgs, "select">): Promise<number> {
    return this.prisma.audio.count(args);
  }

  async audioItems(args: Prisma.AudioFindManyArgs): Promise<PrismaAudio[]> {
    return this.prisma.audio.findMany(args);
  }
  async audio(args: Prisma.AudioFindUniqueArgs): Promise<PrismaAudio | null> {
    return this.prisma.audio.findUnique(args);
  }
  async createAudio(args: Prisma.AudioCreateArgs): Promise<PrismaAudio> {
    return this.prisma.audio.create(args);
  }
  async updateAudio(args: Prisma.AudioUpdateArgs): Promise<PrismaAudio> {
    return this.prisma.audio.update(args);
  }
  async deleteAudio(args: Prisma.AudioDeleteArgs): Promise<PrismaAudio> {
    return this.prisma.audio.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.audio
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
