/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { PhotoFindManyArgs } from "../../photo/base/PhotoFindManyArgs";
import { Photo } from "../../photo/base/Photo";
import { PhotoWhereUniqueInput } from "../../photo/base/PhotoWhereUniqueInput";
import { VideoFindManyArgs } from "../../video/base/VideoFindManyArgs";
import { Video } from "../../video/base/Video";
import { VideoWhereUniqueInput } from "../../video/base/VideoWhereUniqueInput";
import { AudioFindManyArgs } from "../../audio/base/AudioFindManyArgs";
import { Audio } from "../../audio/base/Audio";
import { AudioWhereUniqueInput } from "../../audio/base/AudioWhereUniqueInput";
import { PdfFindManyArgs } from "../../pdf/base/PdfFindManyArgs";
import { Pdf } from "../../pdf/base/Pdf";
import { PdfWhereUniqueInput } from "../../pdf/base/PdfWhereUniqueInput";
import { StatisticsFindManyArgs } from "../../statistics/base/StatisticsFindManyArgs";
import { Statistics } from "../../statistics/base/Statistics";
import { StatisticsWhereUniqueInput } from "../../statistics/base/StatisticsWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/photos")
  @ApiNestedQuery(PhotoFindManyArgs)
  async findPhotos(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Photo[]> {
    const query = plainToClass(PhotoFindManyArgs, request.query);
    const results = await this.service.findPhotos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        url: true,
        uploadedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/photos")
  async connectPhotos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      photos: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/photos")
  async updatePhotos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      photos: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/photos")
  async disconnectPhotos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      photos: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/videos")
  @ApiNestedQuery(VideoFindManyArgs)
  async findVideos(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Video[]> {
    const query = plainToClass(VideoFindManyArgs, request.query);
    const results = await this.service.findVideos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,
        uploadedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/videos")
  async connectVideos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/videos")
  async updateVideos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/videos")
  async disconnectVideos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/audioItems")
  @ApiNestedQuery(AudioFindManyArgs)
  async findAudioItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Audio[]> {
    const query = plainToClass(AudioFindManyArgs, request.query);
    const results = await this.service.findAudioItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,
        uploadedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/audioItems")
  async connectAudioItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      audioItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/audioItems")
  async updateAudioItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      audioItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/audioItems")
  async disconnectAudioItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      audioItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pdfs")
  @ApiNestedQuery(PdfFindManyArgs)
  async findPdfs(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Pdf[]> {
    const query = plainToClass(PdfFindManyArgs, request.query);
    const results = await this.service.findPdfs(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        uploadedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pdfs")
  async connectPdfs(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PdfWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pdfs: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pdfs")
  async updatePdfs(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PdfWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pdfs: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pdfs")
  async disconnectPdfs(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PdfWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pdfs: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/statisticsItems")
  @ApiNestedQuery(StatisticsFindManyArgs)
  async findStatisticsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Statistics[]> {
    const query = plainToClass(StatisticsFindManyArgs, request.query);
    const results = await this.service.findStatisticsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        totalPhotos: true,
        totalVideos: true,
        totalAudios: true,
        totalPdFs: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/statisticsItems")
  async connectStatisticsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StatisticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statisticsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/statisticsItems")
  async updateStatisticsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StatisticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statisticsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/statisticsItems")
  async disconnectStatisticsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StatisticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statisticsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
